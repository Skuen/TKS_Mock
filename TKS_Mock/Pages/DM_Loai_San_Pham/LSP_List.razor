@page "/LSP"

@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject SweetAlertService Swal
<h3>Loại Sản Phẩm</h3>
<br/>
<!--Nút thêm mới-->
<button type="button"
        class="btn btn-primary"
        @onclick="AddLSP">
    Thêm Loại Sản Phẩm
</button>
<br />
<br />
<!-- Thanh tìm kiếm -->
<div class="input-group">
    <input type="text"
           class="form-control"
           placeholder="Điền loại sản phẩm để tìm kiếm"
           @bind-value="v_strSearchTerm" />
    <button type="button"
            class="btn-success input-group-text"
            @onclick="OnSearch">
        Tìm kiếm
    </button>
</div>
<br />
<!-- Danh sách-->
<table class="table"
    <thead>
        <tr>
            <th>Mã LSP</th>
            <th>Tên LSP</th>
            <th>Ghi Chú</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in v_arrLSP)
        {
            <tr>
                <td>@item.Ma_LSP</td>
                <td>@item.Ten_LSP</td>
                <td>@item.Ghi_Chu</td>
                <td>
                    <button type="button"
                            class="btn btn-success" @onclick="@(()=>EditLSP(item.Ma_LSP))">Edit</button>
                    <button type="button"
                                        class="btn btn-danger" @onclick="@(()=>ShowConfirmation(item))">Delete</button>
                </td>

            </tr>
        }
    </tbody>
</table>
<br />

@code {
    private string v_strSearchTerm = string.Empty;
    private List<CDM_Loai_San_Pham> v_arrLSP = new();
    CDM_Loai_San_Pham_Controller v_objLSPController = new();
    protected override void OnInitialized()
    {
        v_arrLSP = v_objLSPController.FQ_122_LSP_sp_sel_List_For_Cache();
    }
    private void OnSearch()
    {
        if (string.IsNullOrEmpty(v_strSearchTerm))
        {
            v_arrLSP = v_objLSPController.FQ_122_LSP_sp_sel_List_For_Cache();
        }
    }
    private void AddLSP()
    {
        NavigationManager.NavigateTo("/AddLSP");
    }

    protected override void OnParametersSet()
    {
        //Nhớ Sửa thằng này xả list by name sử dụng parameter là v_strSearchTerm
        v_arrLSP = v_objLSPController.FQ_122_LSP_sp_sel_List_For_Cache();

    }

    private void EditLSP(string Ma_LSP)
    {
        NavigationManager.NavigateTo($"/EditLSP/{Ma_LSP}");
    }
    private int DeleteLSP(CDM_Loai_San_Pham LSP)
    {
        int v_iRes = 0;
        try
        {
            v_iRes = v_objLSPController.FQ_122_LSP_sp_del_Delete_By_ID(LSP.Ma_LSP);
            v_arrLSP.Remove(LSP);
        }
        catch (Exception)
        {
            throw;
        }
        return v_iRes;

    }
    private async Task ShowConfirmation(CDM_Loai_San_Pham v_objLSP)
    {
        //confirmDialog.Show();
        var result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Are you sure?",
                Text = "You will not be able to recover this!",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Yes, delete it!",
                ConfirmButtonColor = "red",
                CancelButtonText = "No, keep it"
            });
        if (!string.IsNullOrEmpty(result.Value))
        {
            var v_iRes = DeleteLSP(v_objLSP);
            //Có ít nhất 1 row bị ảnh hưởng
            if (v_iRes > 0)
            {
                await Swal.FireAsync(
                  "Deleted",
                  "Your data has been deleted.",
                  SweetAlertIcon.Success
                  );
            }
            //Nếu v_iRes trả default hoặc không có row nào bị ảnh hưởng
            if (v_iRes == 0 || v_iRes == -1)
            {
                await Swal.FireAsync(
                  "Cancelled",
                  "Something wrong happened",
                  SweetAlertIcon.Error
                  );
            }
        }
    }
    
}
